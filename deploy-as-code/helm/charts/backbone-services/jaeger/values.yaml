# Default values for jaeger.
# This is a YAML-formatted file.
# Jaeger values are grouped by component. Cassandra values override subchart values

namespace: monitoring

labels:
  app: jaeger
  collector:
    jaeger-infra: collector

image:
  collector:
    repository: "jaegertracing/jaeger-collector"
    tag: "1.18"
  query:  
    repository: "jaegertracing/jaeger-query"
    tag: "1.18" 
  agent: 
    repository: "jaegertracing/jaeger-agent"
    tag: "1.18" 
  spark:   
    repository: "jaegertracing/spark-dependencies"
    tag: "latest"
  pullPolicy: IfNotPresent


storage:
  cassandra:
    host: cassandra
    port: 9042
    tls:
      enabled: false
      secretName: cassandra-tls-secret
  # allowed values (cassandra, elasticsearch)
  type: elasticsearch
  elasticsearch:
    scheme: http
    host: elasticsearch-master
    port: 9200
    user: ""
    usePassword: false
    password: ""
    # indexPrefix: test
    ## Use existing secret (ignores previous password)
    # existingSecret:
    # existingSecretKey:
    nodesWanOnly: false
    extraEnv: []
    ## ES related env vars to be configured on the concerned components
      # - name: ES_SERVER_URLS
      #   value: http://elasticsearch-master:9200
      # - name: ES_USERNAME
      #   value: elastic
      # - name: ES_INDEX_PREFIX
      #   value: test
    ## ES related cmd line opts to be configured on the concerned components
    cmdlineParams: {}
      # es.server-urls: http://elasticsearch-master:9200
      # es.username: elastic
      # es.index-prefix: test
  kafka:
    brokers:
      - kafka:9092
    topic: jaeger_v1_test
    authentication: none
    extraEnv: []
  env: |
    - name: ES_SERVER_URLS
      valueFrom:
        configMapKeyRef:
          name: egov-service-host
    {{- if index .Values "cluster-configs" "configmaps" "egov-service-host" "data" "es-client-infra" }}          
          key: es-client-infra
    {{- else }}
          key: es-client
    {{- end }}             
    - name: ES_USERNAME
      value: {{ .Values.storage.elasticsearch.user }}
    {{- if .Values.storage.elasticsearch.usePassword }}
    - name: ES_PASSWORD
      value: {{ .Values.storage.elasticsearch.password }}
    {{- if .Values.storage.elasticsearch.indexPrefix }}
    - name: ES_INDEX_PREFIX
      value: {{ .Values.storage.elasticsearch.indexPrefix }}
    {{- end }}
    {{- range $key, $value := .Values.storage.elasticsearch.env }}
    - name: {{ $key | quote }}
      value: {{ $value | quote }}
    {{ end -}}
    {{- if .Values.storage.elasticsearch.extraEnv }}
    {{ toYaml .Values.storage.elasticsearch.extraEnv }}
    {{- end }}
    {{- end -}}


collector: 
  podSecurityContext: {}
  securityContext: {}
  enabled: true
  annotations: {}
  replicas: "1" 
  dnsPolicy: ClusterFirstWithHostNet
  cmdlineParams: {}   
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 10
  service:
    annotations: {}
    # List of IP ranges that are allowed to access the load balancer (if supported)
    loadBalancerSourceRanges: []
    type: ClusterIP
    grpc:
      port: 14250
      # nodePort:
    # httpPort: can accept spans directly from clients in jaeger.thrift format
    http:
      port: 14268
      # nodePort:
    # can accept Zipkin spans in JSON or Thrift
    zipkin: 
      port: 9411
      #nodePort:
  resources: {}
    # limits:
    #   cpu: 1
    #   memory: 1Gi
    # requests:
    #   cpu: 500m
    #   memory: 512Mi
  samplingConfig: |-
      {
        "service_strategies": [
          {
            "service": "tl-services",
            "type": "probabilistic",
            "param": 0.5
          },
          {
            "service": "tl-calculator",
            "type": "probabilistic",
            "param": 0.5
          },
          {
            "service": "report-service",
            "type": "probabilistic",
            "param": 0.5
          },
          {
            "service": "pt-services-v2",
            "type": "probabilistic",
            "param": 0.5
          },
          {
            "service": "pt-calculator-v2",
            "type": "probabilistic",
            "param": 0.5
          },
          {
            "service": "collection-services",
            "type": "probabilistic",
            "param": 0.2
          },
          {
            "service": "billing-service",
            "type": "probabilistic",
            "param": 0.2
          },
          {
            "service": "egov-data-uploader",
            "type": "probabilistic",
            "param": 0.2
          },
          {
            "service": "egov-hrms",
            "type": "probabilistic",
            "param": 0.5
          },
          {
            "service": "rainmaker-pgr",
            "type": "probabilistic",
            "param": 0.5
          }
        ],
        "default_strategy": {
          "type": "probabilistic",
          "param": 0.05
        }
      }


ingester:
  enabled: false
  podSecurityContext: {}
  securityContext: {}
  annotations: {}
  image: jaegertracing/jaeger-ingester
  imagePullSecrets: []
  dnsPolicy: ClusterFirst
  cmdlineParams: {}
  replicaCount: 1
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 10
    # targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  service:
    annotations: {}
    # List of IP ranges that are allowed to access the load balancer (if supported)
    loadBalancerSourceRanges: []
    type: ClusterIP
  resources: {}
    # limits:
    #   cpu: 1
    #   memory: 1Gi
    # requests:
    #   cpu: 500m
    #   memory: 512Mi
  serviceAccount:
    create: true
    name:
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}
  ## Additional pod labels
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels: {}
  extraSecretMounts: []
  extraConfigmapMounts: []

  serviceMonitor:
    enabled: false
    additionalLabels: {}        

query:
  enabled: true
  podSecurityContext: {}
  securityContext: {}
  agentSidecar:
    enabled: false
  annotations: {}
  imagePullSecrets: []
  dnsPolicy: ClusterFirstWithHostNet
  cmdlineParams: {}
  extraEnv: []
  replicas: "1"
  basePath: /tracing
  service:
    annotations: {}
    type: ClusterIP
    # List of IP ranges that are allowed to access the load balancer (if supported)
    loadBalancerSourceRanges: []
    port: 80
    # Specify a specific node port when type is NodePort
    # nodePort: 32500
  resources: {}
    # limits:
    #   cpu: 500m
    #   memory: 512Mi
    # requests:
    #    cpu: 256m
    #    memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}
  ## Additional pod labels
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels: {}
  extraConfigmapMounts: []
  # - name: jaeger-config
  #   mountPath: /config
  #   subPath: ""
  #   configMap: jaeger-config
  #   readOnly: true

  # config: |-
  #   {
  #     "dependencies": {
  #       "dagMaxNumServices": 200,
  #       "menuEnabled": true
  #     },
  #     "archiveEnabled": true,
  #     "tracking": {
  #       "gaID": "UA-000000-2",
  #       "trackErrors": true
  #     }
  #   }
agent:
  podSecurityContext: {}
  securityContext: {}
  enabled: true
  annotations: {}
  image: jaegertracing/jaeger-agent
  imagePullSecrets: []
  cmdlineParams: {}
  extraEnv: []
  daemonset:
    useHostPort: false
  service:
    annotations: {}
    # List of IP ranges that are allowed to access the load balancer (if supported)
    loadBalancerSourceRanges: []
    type: ClusterIP
    # zipkinThriftPort :accept zipkin.thrift over compact thrift protocol
    zipkinThriftPort: 5775
    # compactPort: accept jaeger.thrift over compact thrift protocol
    compactPort: 6831
    # binaryPort: accept jaeger.thrift over binary thrift protocol
    binaryPort: 6832
    # samplingPort: (HTTP) serve configs, sampling strategies
    samplingPort: 5778
  resources: {}
    # limits:
    #   cpu: 500m
    #   memory: 512Mi
    # requests:
    #   cpu: 256m
    #   memory: 128Mi
  serviceAccount:
    create: true
    name:
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}
  ## Additional pod labels
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels: {}
  extraSecretMounts: []
  # - name: jaeger-tls
  #   mountPath: /tls
  #   subPath: ""
  #   secretName: jaeger-tls
  #   readOnly: true
  extraConfigmapMounts: []
  # - name: jaeger-config
  #   mountPath: /config
  #   subPath: ""
  #   configMap: jaeger-config
  #   readOnly: true
  useHostNetwork: true
  dnsPolicy: ClusterFirstWithHostNet
  priorityClassName: ""

  serviceMonitor:
    enabled: false
    additionalLabels: {}

spark:
  enabled: true
  annotations: {}
  image: jaegertracing/spark-dependencies
  imagePullSecrets: []
  tag: latest
  pullPolicy: Always
  cmdlineParams: {}
  extraEnv: []
  schedule: "49 23 * * *"
  successfulJobsHistoryLimit: 5
  failedJobsHistoryLimit: 5
  resources: {}
    # limits:
    #   cpu: 500m
    #   memory: 512Mi
    # requests:
    #   cpu: 256m
    #   memory: 128Mi
  serviceAccount:
    create: true
    name:
  nodeSelector: {}
  tolerations: []
  affinity: {}
  extraSecretMounts: []
  extraConfigmapMounts: []
  ## Additional pod labels
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels: {}    

ingress:
  serviceName: jaeger-query
  servicePort: 80
  enabled: true
  context: "tracing"
  waf: 
    enabled: false  
  additionalAnnotations: |
    nginx.ingress.kubernetes.io/auth-signin:  https://$host/oauth2/start?rd=$escaped_request_uri
    nginx.ingress.kubernetes.io/auth-url:     https://$host/oauth2/auth   