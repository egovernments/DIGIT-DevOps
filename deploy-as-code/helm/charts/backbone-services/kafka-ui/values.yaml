namespace: kafka-kraft

labels:
  app: kafka-ui
  group: kafka

ingress:
  enabled: true
  context: "kafka-ui(/|$)"
  waf:
    enabled: false
  annotations:
    nginx.ingress.kubernetes.io/auth-signin:  https://$host/oauth2/start?rd=$escaped_request_uri
    nginx.ingress.kubernetes.io/auth-url:     https://$host/oauth2/auth
    kubernetes.io/ingress.class:              nginx
    nginx.ingress.kubernetes.io/configuration-snippet: |
      if ($request_uri ~* "^/kafka-ui$") {
        return 301 $scheme://$host/kafka-ui/;
      }

livenessProbe:
  enabled: true
readinessProbe:
  enabled: true

replicaCount: 1

image:
  registry: docker.io
  repository: provectuslabs/kafka-ui
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

existingConfigMap: ""
yamlApplicationConfig:
  auth:
    type: OAUTH2
    oauth2:
      client:
        github:
          provider: github
          scope: read:org
          user-name-attribute: login
          custom-params:
            type: github
  rbac:
    roles:
      - name: "readonly"
        clusters:
          - unified-uat
        subjects:
          - provider: oauth_github
            type: team
            value: "egovernments/micro-service-uat"
        permissions:
          - resource: topic
            value: ".*"
            actions: [ "view" ]
          - resource: consumer
            value: ".*"
            actions: [ "view" ]
      # - name: "admins"
      #   clusters:
      #     - unified-uat
      #   subjects:
      #     - provider: oauth_github
      #       type: team
      #       value: "egovernments/uat-kafka-ui-master"
      #   permissions:
      #     - resource: topic
      #       value: ".*"
      #       actions: all
      #     - resource: consumer
      #       value: ".*"
      #       actions: all

yamlApplicationConfigConfigMap:
  {}
existingSecret: ""
envs:
  secret: {}
  config:
    SERVER_SERVLET_CONTEXT_PATH: "/kafka-ui"

networkPolicy:
  enabled: false
  egressRules:
    customRules: []
  ingressRules:
    customRules: []

podAnnotations: {}
podLabels: {}

annotations: {}

probes:
  useHttpsScheme: false

podSecurityContext:
  {}
securityContext:
  {}

service:
  type: ClusterIP
  port: 8080

resources:
  limits:
    cpu: 200m
    memory: 512Mi
  requests:
    cpu: 200m
    memory: 256Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

env:
  - name: SERVER_SERVLET_CONTEXT_PATH
    value: /kafka-ui

initContainers: {}

volumeMounts: {}

volumes: {}
