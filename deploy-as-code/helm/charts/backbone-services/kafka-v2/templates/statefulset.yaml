apiVersion: {{ template "statefulset.apiVersion" . }}
kind: StatefulSet
metadata:
  name: {{ template "name" . }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ template "name" . }}
spec:
  serviceName: {{ template "name" . }}-headless
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  replicas: {{ .Values.replicas }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      app: {{ template "name" . }}
  updateStrategy:
    type: {{ .Values.updateStrategy }}
  template:
    metadata:
      labels:
        app: {{ template "name" . }}
      {{- if or .Values.podAnnotations .Values.prometheus.jmx.enabled }}
      annotations:
      {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- if .Values.prometheus.jmx.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.prometheus.jmx.port | quote }}
      {{- end }}
      {{- end }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - {{ template "name" . }}
              topologyKey: "kubernetes.io/hostname"
      containers:
      {{- if .Values.prometheus.jmx.enabled }}
      - name: prometheus-jmx-exporter
        image: "{{ .Values.prometheus.jmx.image }}:{{ .Values.prometheus.jmx.imageTag }}"
        imagePullPolicy: "{{ .Values.prometheus.jmx.imagePullPolicy }}"
        command:
        - java
        - -XX:+UnlockExperimentalVMOptions
        - -XX:+UseCGroupMemoryLimitForHeap
        - -XX:MaxRAMFraction=1
        - -XshowSettings:vm
        - -jar
        - jmx_prometheus_httpserver.jar
        - {{ .Values.prometheus.jmx.port | quote }}
        - /etc/jmx-kafka/jmx-kafka-prometheus.yml
        ports:
        - containerPort: {{ .Values.prometheus.jmx.port }}
        resources:
{{ toYaml .Values.prometheus.jmx.resources | indent 10 }}
        volumeMounts:
        - name: jmx-config
          mountPath: /etc/jmx-kafka
      {{- end }}
      - name: {{ template "name" . }}-broker
        image: {{ template "common.image" (dict "Values" .Values "repository" .Values.image.repository "tag" .Values.image.tag) }}
        imagePullPolicy: "{{ .Values.imagePullPolicy }}"
        ports:
        - containerPort: 9092
          name: kafka
      {{- if .Values.prometheus.jmx.enabled }}
        - containerPort: {{ .Values.jmx.port }}
          name: jmx
      {{- end }}
      {{- if .Values.resources }}                                     
        resources:
          {{- tpl .Values.resources . | nindent 10 }}
      {{- end }}  
        readinessProbe:
          tcpSocket:
            port: 9092
          timeoutSeconds: 1
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KAFKA_HEAP_OPTS
          value: {{ .Values.heapOptions | quote }}
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: {{ .Values.zookeeperHosts | quote }}
        - name: KAFKA_LOG_DIRS
          value: {{ .Values.logDirs | quote }}
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: {{ .Values.listenerSecurity | quote }}      
        - name: "KAFKA_LINGER_MS"
          value: {{ .Values.lingerMs | quote }}
        - name: "KAFKA_NUM_PARTITIONS"
          value: {{ .Values.numberPartitions | quote }}
        - name: "KAFKA_DEFAULT_REPLICATION_FACTOR"
          value: {{ .Values.replicationFactor | quote }}
        - name: "KAFKA_MIN_INSYNC_REPLICAS"
          value: {{ .Values.minInsyncReplicas | quote }}
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: {{ .Values.offsetsReplicationFactor | quote }} 
        # This is required because the Downward API does not yet support identification of
        # pod numbering in statefulsets. Thus, we are required to specify a command which
        # allows us to extract the pod ID for usage as the Kafka Broker ID.
        # See: https://github.com/kubernetes/kubernetes/issues/31218
        command:
        - sh
        - -exc
        - |
          export KAFKA_BROKER_ID=${HOSTNAME##*-} && \
          export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${POD_NAME}.{{ template "name" . }}-headless.${POD_NAMESPACE}:9092,EXTERNAL://${HOST_IP}:$((31090 + ${KAFKA_BROKER_ID})) && \
          exec /etc/confluent/docker/run
        lifecycle:
          preStop:
            exec:
             command: ["sh", "-ce", "kill -s TERM 1; while $(kill -0 1 2>/dev/null); do sleep 1; done"]  
        volumeMounts:
        - name: kafka-data
          mountPath: /opt/kafka-data
    {{- if or .Values.prometheus.jmx.enabled (not .Values.persistence.enabled) }}          
      volumes:
      {{ if not .Values.persistence.enabled }}
      - name: kafka-data
        emptyDir: {}
      {{- end }}     
      {{ if .Values.prometheus.jmx.enabled }} 
      - name: jmx-config
        configMap:
          name: {{ template "name" . }}-jmx-configmap
      {{- end }}  
    {{- end }}      
{{- if .Values.persistence.enabled }}          
  volumeClaimTemplates:
  - metadata:
      name: kafka-data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.persistence.dataDirSize | quote }}  
{{- end }}              