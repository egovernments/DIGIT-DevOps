---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "kibana.fullname" . }}-helm-scripts
  namespace: {{ .Values.namespace }}
  labels: {{ include "kibana.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-delete
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    {{- if .Values.annotations }}
    {{- range $key, $value := .Values.annotations }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
    {{- end }}
data:
  manage-es-token.js: |
    const http = require('http'); // Change https to http for Elasticsearch connection
    const https = require('https');
    const fs = require('fs');

    // Read environment variables
    function getEnvVar(name) {
      if (!process.env[name]) {
        throw new Error(name + ' environment variable is missing');
      }
      return process.env[name];
    }

    // Elasticsearch API
    const esPath = '_security/service/elastic/kibana/credential/token/{{ template "kibana.fullname" . }}';
    const esUrl = '{{ .Values.elasticsearchHosts }}' + '/' + esPath; // Changed to http for external Elasticsearch connection
    const esUsername = getEnvVar('ELASTICSEARCH_USERNAME');
    const esPassword = getEnvVar('ELASTICSEARCH_PASSWORD');
    const esAuth = esUsername + ':' + esPassword;

    // Kubernetes API
    const k8sHostname = getEnvVar('KUBERNETES_SERVICE_HOST');
    const k8sPort = getEnvVar('KUBERNETES_SERVICE_PORT_HTTPS');
    const k8sPostSecretPath = 'api/v1/namespaces/{{ .Values.namespace }}/secrets';
    const k8sDeleteSecretPath = 'api/v1/namespaces/{{ .Values.namespace }}/secrets/{{ template "kibana.fullname" . }}-es-token';
    const k8sPostSecretUrl = `https://${k8sHostname}:${k8sPort}/${k8sPostSecretPath}`;
    const k8sDeleteSecretUrl = `https://${k8sHostname}:${k8sPort}/${k8sDeleteSecretPath}`;
    const k8sBearer = fs.readFileSync('/run/secrets/kubernetes.io/serviceaccount/token');
    const k8sCa = fs.readFileSync('/run/secrets/kubernetes.io/serviceaccount/ca.crt');

    // Post Data
    const esTokenDeleteOptions = {
      method: 'DELETE',
      auth: esAuth,
    };

    const esTokenCreateOptions = {
      method: 'POST',
      auth: esAuth,
    };

    const secretCreateOptions = {
      method: 'POST',
      ca: k8sCa,
      headers: {
        'Authorization': 'Bearer ' + k8sBearer,
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      },
    };

    const secretDeleteOptions = {
      method: 'DELETE',
      ca: k8sCa,
      headers: {
        'Authorization': 'Bearer ' + k8sBearer,
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      },
    };

    // Use http for Elasticsearch and https for Kubernetes
    function requestPromise(url, options, extraOptions = {}) {
      const requestModule = url.startsWith('http://') ? http : https; // Use http for Elasticsearch, https for Kubernetes
      return new Promise((resolve, reject) => {
        const request = requestModule.request(url, options, response => {
          console.log('statusCode:', response.statusCode);

          let isSuccess = undefined;

          if (typeof(extraOptions.extraStatusCode) !== 'undefined' && extraOptions.extraStatusCode != null) {
            isSuccess = response.statusCode >= 200 && response.statusCode < 300 || response.statusCode === extraOptions.extraStatusCode;
          } else {
            isSuccess = response.statusCode >= 200 && response.statusCode < 300;
          }

          let data = '';
          response.on('data', chunk => data += chunk); // accumulate data
          response.once('end', () => isSuccess ? resolve(data) : reject(data));  // resolve promise here
        });

        request.once('error', err => {
          console.log(`${options.method} ${options.path} failed: `, err.message || err);
          reject(err);
        });

        if (typeof(extraOptions.payload) !== 'undefined') {
          request.write(extraOptions.payload);
        }
        request.end();
      });
    }

    function createEsToken() {
      // Check if the K8S secret exists
      console.log('Checking if K8S secret exists');
      return requestPromise(k8sDeleteSecretUrl, { method: 'GET', ca: k8sCa, headers: { 'Authorization': 'Bearer ' + k8sBearer } })
          .then(() => {
              console.log('K8S secret already exists, deleting...');
              return requestPromise(k8sDeleteSecretUrl, secretDeleteOptions);
          })
          .catch(error => {
              if (error.includes('404')) {
                  console.log('K8S secret does not exist');
              } else {
                  throw error;
              }
          })
          .then(() => {
              console.log('Cleaning Elasticsearch token');
              return requestPromise(esUrl, esTokenDeleteOptions, {extraStatusCode: 404});
          })
          .then(() => {
              console.log('Creating new token');
              return requestPromise(esUrl, esTokenCreateOptions).then(response => {
                  const body = JSON.parse(response);
                  const token = body.token.value;
                  const base64Token = Buffer.from(token, 'utf8').toString('base64');

                  const secretData = JSON.stringify({
                      "apiVersion": "v1",
                      "kind": "Secret",
                      "metadata": {
                          "namespace": "{{ .Values.namespace }}",
                          "name": "{{ template "kibana.fullname" . }}-es-token",
                      },
                      "type": "Opaque",
                      "data": {
                          "token": base64Token,
                      }
                  });

                  console.log('Creating K8S secret');
                  return requestPromise(k8sPostSecretUrl, secretCreateOptions, { payload: secretData });
              });
          });
    }

    const command = process.argv[2];
    switch (command) {
      case 'create':
        console.log('Creating a new Elasticsearch token for Kibana');
        createEsToken().catch(err => {
          console.error(err);
          process.exit(1);
        });
        break;
      case 'clean':
        console.log('Cleaning the Kibana Elasticsearch token');
        cleanEsToken().catch(err => {
          console.error(err);
          process.exit(1);
        });
        break;
      default:
        console.log('Unknown command');
        process.exit(1);
    }
