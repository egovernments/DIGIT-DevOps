#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
{{- if .Values.init.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "name" . }}-init-db
  namespace: {{ .Values.namespace }}
spec:
  template:
    metadata:
      name: {{ template "name" . }}-init-db
    spec:
      securityContext:
        runAsUser: {{ .Values.runAsUser }}
      {{- if .Values.init.initContainers }}
      initContainers:
      - command:
        - /bin/sh
        - -c
        - until nc -zv $DB_HOST $DB_PORT -w1; do echo 'waiting for db'; sleep 1; done
        env:   
          {{-  tpl .Values.init.initContainers.env . | nindent 12 }}
        image: busybox:latest
        imagePullPolicy: IfNotPresent
        name: wait-for-postgres  
      {{- end }}
      containers:
      - name: {{ template "name" . }}-init-db
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        env:
          - name: REDIS_HOST
            value: {{ .Values.connections.redis_host }}
          - name: REDIS_PORT
            value: {{ .Values.connections.redis_port }}
          - name: DB_HOST
            value: {{ .Values.connections.db_host }}
          - name: DB_PORT
            value: {{ .Values.connections.db_port }}
          - name: DB_USER
            valueFrom:
              secretKeyRef: 
                name: db
                key: supersetdb-username
          - name: DB_PASS
            valueFrom:
              secretKeyRef: 
                name: db
                key: supersetdb-password
          - name: DB_NAME
            value: {{ .Values.connections.db_name }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        volumeMounts:
          - name: superset-config
            mountPath: {{ .Values.configMountPath | quote }}
            readOnly: true
        {{- if .Values.extraConfigs }}
          - name: superset-extra-config
            mountPath: {{ .Values.extraConfigMountPath | quote }}
            readOnly: true
        {{- end }}
        command: {{  tpl (toJson .Values.init.command) . }}
        resources:
{{ toYaml .Values.init.resources | indent 10 }}
{{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}
      volumes:
        - name: superset-config
          secret:
            secretName: {{ tpl .Values.configFromSecret . }}
        {{- if .Values.extraConfigs }}
        - name: superset-extra-config
          configMap:
            name: {{ template "name" . }}-extra-config
        {{- end }}
      restartPolicy: Never
{{- end }}
