apiVersion: {{ template "statefulset.apiVersion" . }}
kind: StatefulSet
metadata:
  name: {{ template "name" . }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ template "name" . }}
spec:
  serviceName: "{{ template "name" . }}-headless"
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  replicas: {{ .Values.replicas }}
  updateStrategy:
    type: {{ .Values.updateStrategy }}
  selector:
    matchLabels:
      app: {{ template "name" . }}    
  template:
    metadata:
      labels:
        app: {{ template "name" . }}
      {{- if or .Values.podAnnotations .Values.prometheus.jmx.enabled }}        
      annotations:
      {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- if .Values.prometheus.jmx.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.prometheus.jmx.port | quote }}
      {{- end }}
      {{- end }}        
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - {{ template "name" . }}
              topologyKey: "kubernetes.io/hostname"
      containers:
      {{- if .Values.prometheus.jmx.enabled }}
      - name: prometheus-jmx-exporter
        image: "{{ .Values.prometheus.jmx.image }}:{{ .Values.prometheus.jmx.imageTag }}"
        imagePullPolicy: "{{ .Values.prometheus.jmx.imagePullPolicy }}"
        command:
        - java
        - -XX:+UnlockExperimentalVMOptions
        - -XX:+UseCGroupMemoryLimitForHeap
        - -XX:MaxRAMFraction=1
        - -XshowSettings:vm
        - -jar
        - jmx_prometheus_httpserver.jar
        - {{ .Values.prometheus.jmx.port | quote }}
        - /etc/jmx-zookeeper/jmx-zookeeper-prometheus.yml
        ports:
        - containerPort: {{ .Values.prometheus.jmx.port }}
        resources:
{{ toYaml .Values.prometheus.jmx.resources | indent 10 }}
        volumeMounts:
        - name: jmx-config
          mountPath: /etc/jmx-zookeeper
      {{- end }}      
      - name: zookeeper-server
        image: {{ template "common.image" (dict "Values" .Values "repository" .Values.image.repository "tag" .Values.image.tag) }}
        imagePullPolicy: "{{ .Values.imagePullPolicy }}"
        ports:
        - containerPort: {{ .Values.clientPort }}
          name: client
        - containerPort: {{ .Values.serverPort }}
          name: server
        - containerPort: {{ .Values.leaderElectionPort }}
          name: leader-election
        {{- if .Values.prometheus.jmx.enabled }}
        - containerPort: {{ .Values.jmx.port }}
          name: jmx
        {{- end }}          
        env:
        - name : KAFKA_HEAP_OPTS
          value: "{{ .Values.heapOptions }}"
        {{- if .Values.jmx.port }}
        - name : KAFKA_JMX_PORT
          value: "{{ .Values.jmx.port }}"
        {{- end }}
        - name : ZOOKEEPER_TICK_TIME
          value: "{{ .Values.tickTime }}"
        - name : ZOOKEEPER_SYNC_LIMIT
          value: "{{ .Values.syncLimit }}"
        - name : ZOOKEEPER_INIT_LIMIT
          value: "{{ .Values.initLimit }}"
        - name : ZOOKEEPER_MAX_CLIENT_CNXNS
          value: "{{ .Values.maxClientCnxns }}"
        - name : ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT
          value: "{{ .Values.autoPurgeSnapRetainCount}}"
        - name : ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL
          value: "{{ .Values.autoPurgePurgeInterval}}"
        - name: ZOOKEEPER_CLIENT_PORT
          value: "{{ .Values.clientPort }}"
        - name : ZOOKEEPER_SERVERS
          value: {{ template "zookeeper.serverlist" . }}
        # ZOOKEEPER_SERVER_ID is required just to pass zookeeper ensure script for env check,
        # the value(metadata.mame) is not used and will be overwritten in command part
        - name: ZOOKEEPER_SERVER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        command:
        - "bash"
        - "-c"
        - |
          mkdir -p /var/lib/zookeeper/data && mkdir -p /var/lib/zookeeper/log && \
          ZK_FIX_HOST_REGEX="s/${HOSTNAME}\.[^:]*:/0.0.0.0:/g" \
          ZOOKEEPER_SERVER_ID=$((${HOSTNAME##*-}+1)) \
          ZOOKEEPER_SERVERS=`echo $ZOOKEEPER_SERVERS | sed -e "$ZK_FIX_HOST_REGEX"` \
          /etc/confluent/docker/run
        lifecycle:
          preStop:
            exec:
             command: ["sh", "-ce", "kill -s TERM 1; while $(kill -0 1 2>/dev/null); do sleep 1; done"]  
        resources:
{{ toYaml .Values.resources | indent 10 }}        
        volumeMounts:
        - name: zookeeper-data
          mountPath: /var/lib/zookeeper/
      {{- if .Values.prometheus.jmx.enabled }}          
      volumes:
      - name: jmx-config
        configMap:
          name: {{ template "name" . }}-jmx-configmap
      {{- end }}          
  volumeClaimTemplates:
  - metadata:
      name: zookeeper-data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.persistence.dataDirSize | quote }}       