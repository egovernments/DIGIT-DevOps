# Default values for commons.
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
global:
    containerRegistry: egovio
    canary: false

namespace: egov
replicas: 1
httpPort: 8080
appType: ""

ingress:
  enabled: false
  zuul: false
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/use-regex: "true" 
   # nginx.ingress.kubernetes.io/limit-rpm: "300"
  waf: 
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/lua-resty-waf: "active"  
      nginx.ingress.kubernetes.io/lua-resty-waf-debug: "true"
      nginx.ingress.kubernetes.io/lua-resty-waf-score-threshold: "10"
      nginx.ingress.kubernetes.io/lua-resty-waf-allow-unknown-content-types: "true"
      nginx.ingress.kubernetes.io/lua-resty-waf-process-multipart-body: "false"              

image:
  pullPolicy: IfNotPresent   

affinity:
    preferSpreadAcrossAZ: true

initContainers:
  dbMigration:
    enabled: false
    image:
      pullPolicy: IfNotPresent  
      tag: latest
    env: |
        - name: "DB_URL"
          valueFrom: 
            configMapKeyRef: 
              name: egov-config
              key: db-url
        - name: "SCHEMA_TABLE"
          value: {{ .Values.initContainers.dbMigration.schemaTable | quote }}              
        - name: "FLYWAY_USER"
          valueFrom: 
            secretKeyRef: 
                name: db
                key: flyway-username
        - name: "FLYWAY_PASSWORD"
          valueFrom:
            secretKeyRef: 
                name: db
                key: flyway-password
        - name: "FLYWAY_LOCATIONS"
          valueFrom: 
            configMapKeyRef: 
                name: egov-config
                key: flyway-locations

  gitSync:
    enabled: false
    image:
      repository: k8s.gcr.io/git-sync
      tag: v3.1.1
      pullPolicy: IfNotPresent   
    env: |
        - name: "GIT_SYNC_REPO"
          value: "{{ .Values.initContainers.gitSync.repo }}"
        - name: "GIT_SYNC_BRANCH"
          value: "{{ .Values.initContainers.gitSync.branch }}"        
        - name: "GIT_SYNC_DEPTH"
          value: "1"            
        - name: "GIT_SYNC_ONE_TIME"
          value: "true"          
        - name: "GIT_SYNC_SSH"
          value: "true"      
        - name: "GIT_SYNC_ROOT"
          value: "/work-dir"

healthChecks:
    enabled: false
    livenessProbe: |
        httpGet:
            path: "{{ .Values.healthChecks.livenessProbePath }}"
            port: {{ .Values.httpPort }}
        initialDelaySeconds: 30
        timeoutSeconds: 3
        periodSeconds: 60
        successThreshold: 1
        failureThreshold: 5
    readinessProbe: |
        httpGet:
            path: "{{ .Values.healthChecks.readinessProbePath }}"
            port: {{ .Values.httpPort }}
        initialDelaySeconds: 30
        timeoutSeconds: 3
        periodSeconds: 30
        successThreshold: 1
        failureThreshold: 5        

lifecycle:
    preStop:
        exec:
            command:
            - sh
            - -c
            - "sleep 10"

memory_limits: "512Mi"
resources: |
  {{- if eq .Values.appType "java-spring" -}}
  requests:
    memory: {{ .Values.memory_limits | quote }}
  limits:
    memory: {{ .Values.memory_limits | quote }}
  {{- end -}}
## Allows specification of additional environment variables
extraEnv:
  java: |
      - name: SPRING_DATASOURCE_URL
        valueFrom:
          configMapKeyRef:
            name: egov-config
            key: db-url
      - name: FLYWAY_ENABLED
        value: "false"      
      - name: SPRING_FLYWAY_ENABLED
        value: "false"      
      - name: MANAGEMENT_ENDPOINTS_WEB_BASE_PATH
        value: "/"
      - name: APP_TIMEZONE
        valueFrom:
          configMapKeyRef:
            name: egov-config
            key: timezone              
      - name: FLYWAY_URL
        valueFrom:
          configMapKeyRef:
            name: egov-config
            key: db-url
      - name: SPRING_DATASOURCE_USERNAME
        valueFrom:
          secretKeyRef:
            name: db
            key: username
      - name: SPRING_DATASOURCE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: db
            key: password
      - name: SPRING_DATASOURCE_TOMCAT_INITIAL_SIZE
        valueFrom:
          configMapKeyRef:
            name: egov-config
            key: spring-datasource-tomcat-initialSize
      - name: SERVER_TOMCAT_MAX_THREADS
      {{- if index .Values "server-tomcat-max-threads" }} 
        value: {{ index .Values "server-tomcat-max-threads" | quote }}    
      {{- else }}        
        valueFrom:
          configMapKeyRef:
            name: egov-config
            key: server-tomcat-max-threads
      {{- end }}            
      - name: SERVER_TOMCAT_MAX_CONNECTIONS
      {{- if index .Values "server-tomcat-max-connections" }} 
        value: {{ index .Values "server-tomcat-max-connections" | quote }}    
      {{- else }}        
        valueFrom:
          configMapKeyRef:
            name: egov-config
            key: server-tomcat-max-connections
      {{- end }}                
      - name: SPRING_DATASOURCE_TOMCAT_MAX_ACTIVE
      {{- if index .Values "spring-datasource-tomcat-max-active" }}
        value: {{ index .Values "spring-datasource-tomcat-max-active" | quote }}
      {{- else }} 
        valueFrom:
          configMapKeyRef:
            name: egov-config
            key: spring-datasource-tomcat-max-active 
      {{- end }}       
      - name: SPRING_DATASOURCE_HIKARI_MAXIMUM-POOL-SIZE
      {{- if index .Values "spring-datasource-tomcat-max-active" }}
        value: {{ index .Values "spring-datasource-tomcat-max-active" | quote }}
      {{- else }}
        valueFrom:
          configMapKeyRef:
            name: egov-config
            key: spring-datasource-tomcat-max-active 
      {{- end }}           
      - name: KAFKA_CONFIG_BOOTSTRAP_SERVER_CONFIG
        valueFrom:
          configMapKeyRef:
            name: egov-config
            key: kafka-brokers
      - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
        valueFrom:
          configMapKeyRef:
            name: egov-config
            key: kafka-brokers
      - name: SPRING_JPA_SHOW_SQL
        valueFrom:
          configMapKeyRef:
            name: egov-config
            key: spring-jpa-show-sql  
      - name: STATE_LEVEL_TENANTID_LENGTH
        value: "1"            
      - name: IS_ENVIRONMENT_CENTRAL_INSTANCE
        value: "false"
      - name: STATE_SCHEMA_INDEX_POSITION_TENANTID
        value: "0"
      - name: KAFKA_TOPIC_AUDIT
      {{- if index .Values "kafka.topic.audit" }}
        value: {{ index .Values "kafka.topic.audit" | quote }}
      {{- else }}
        value: "enc-user-audit-data"
      {{- end }}           
        
            
            
            
  jaeger: |             
      - name: JAEGER_SERVICE_NAME
        value: {{ template "common.name" . }}
      - name: JAEGER_SAMPLER_TYPE
        value: remote
      - name: JAEGER_AGENT_HOST
        valueFrom:
          fieldRef:
            fieldPath: status.hostIP
      - name: JAEGER_AGENT_PORT
        value: "6831"
      - name: JAEGER_SAMPLER_MANAGER_HOST_PORT
        value: "$(JAEGER_AGENT_HOST):5778"
      - name: TRACER_OPENTRACING_ENABLED
        value: "true"         
## Additional init containers
extraInitContainers: |

## Additional sidecar containers
extraContainers: |

## Add additional volumes and mounts, e. g. for custom themes
extraVolumes: |
extraVolumeMounts: |

additionalLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000            

service:
  additionalAnnotations: {}

serviceMonitor:
  honorLabels: true
  # interval: 2m  

cron:
  namespace: egov
  concurrencyPolicy: Forbid
  restartPolicy: OnFailure
  httpPort: 8080
  ## Additional sidecar containers
  extraContainers: |

  ## Add additional volumes and mounts
  extraVolumes: |

  ## Add additional mounts
  extraVolumeMounts: |

vpa:
  enabled: false  
  updateMode: "Off"

canary:
  progressDeadlineSeconds: 60
  analysis:
    interval: 30s
    threshold: 3
    maxWeight: 60
    stepWeight: 20
    metrics:
    - name: nginx_ingress_controller_request_size_bucket
      thresholdRange:
        min: 99
      interval: 1m
    - name: nginx_ingress_controller_request_duration_seconds_bucket
      thresholdRange:
        max: 250
      interval: 30s
  additionalAnnotations: |
      linkerd.io/inject: enabled
      config.linkerd.io/proxy-cpu-limit: "0.5"
      config.linkerd.io/proxy-cpu-request: "0.1"
      config.linkerd.io/proxy-memory-limit: 1Gi
      config.linkerd.io/proxy-memory-request: 64Mi
  ingressAnnotations: |
      nginx.ingress.kubernetes.io/configuration-snippet: proxy_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:8080; proxy_hide_header l5d-remote-ip; proxy_hide_header l5d-server-id;      
hpa:
  enabled: false 